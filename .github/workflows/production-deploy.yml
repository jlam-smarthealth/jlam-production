name: üöÄ JLAM Production Deployment - Clean Enterprise Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        type: choice
        options:
          - 'staging'
          - 'production'
        default: 'staging'
      deployment_type:
        description: 'Deployment Type'
        required: true
        type: choice
        options:
          - 'infrastructure-only'
          - 'full-deployment'
          - 'emergency-rollback'
        default: 'full-deployment'

env:
  # Terraform Cloud Integration
  TERRAFORM_CLOUD_API_TOKEN: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}
  
  # Scaleway Configuration (for Terraform Cloud workspace)
  SCALEWAY_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
  SCALEWAY_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
  SCALEWAY_DEFAULT_PROJECT_ID: ${{ secrets.SCALEWAY_DEFAULT_PROJECT_ID }}
  SCALEWAY_DEFAULT_ORGANIZATION_ID: ${{ secrets.SCALEWAY_DEFAULT_ORGANIZATION_ID }}
  
  # Database Configuration (managed in Terraform Cloud workspace)
  TF_VAR_jlam_database_host: ${{ secrets.JLAM_DATABASE_HOST }}
  TF_VAR_jlam_database_port: ${{ secrets.JLAM_DATABASE_PORT }}
  TF_VAR_jlam_database_user: ${{ secrets.JLAM_DATABASE_USER }}
  TF_VAR_jlam_database_password: ${{ secrets.JLAM_DATABASE_PASSWORD }}
  TF_VAR_jlam_database_name: ${{ secrets.JLAM_DATABASE_NAME }}
  
  # Application Configuration  
  TF_VAR_secret_key_base: ${{ secrets.SECRET_KEY_BASE }}
  TF_VAR_deployment_timestamp: ${{ github.run_number }}
  
  # Production Server (IP RETENTION CRITICAL)
  TF_VAR_server_ip: "51.158.190.109"

jobs:
  # ===== PHASE 1: SECURITY & VALIDATION =====
  security-validation:
    name: üõ°Ô∏è Security & Configuration Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Clean Repository
        uses: actions/checkout@v4
        
      - name: üîç Enterprise Security Scan
        run: |
          echo "üîç Scanning for security vulnerabilities..."
          
          # Check for exposed secrets (exclude SSL certificates directory)
          if find . -type f \( -name "*.yml" -o -name "*.yaml" -o -name "*.tf" \) \
             -not -path "./config/ssl/*" \
             -exec grep -l "password\|secret\|key" {} \; | grep -v ".github"; then
            echo "‚ùå SECURITY ALERT: Potential secrets found!"
            exit 1
          fi
          
          # Validate SSL certificate presence (but not content)
          if [ ! -f "config/ssl/certificate.crt" ]; then
            echo "‚ö†Ô∏è  SSL certificates not present (will use Let's Encrypt)"
          else
            echo "‚úÖ SSL certificates present"
          fi
          
          echo "‚úÖ Security scan passed"
          
      - name: üß™ Docker Compose Validation
        run: |
          echo "üß™ Validating Docker Compose configuration..."
          docker-compose config > /dev/null
          echo "‚úÖ Docker Compose configuration is valid"
          
      - name: üìã Makefile Validation  
        run: |
          echo "üìã Validating Makefile commands..."
          make help > /dev/null
          echo "‚úÖ Makefile is valid"

  # ===== PHASE 2: TERRAFORM VALIDATION =====
  terraform-validation:
    name: üèóÔ∏è Terraform Infrastructure Validation
    runs-on: ubuntu-latest
    needs: security-validation
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
          
      - name: üîç Terraform Validation
        run: |
          cd terraform/
          terraform fmt -check
          terraform init -backend=false
          terraform validate
          echo "‚úÖ Terraform configuration validated"

  # ===== PHASE 3: PRODUCTION DEPLOYMENT =====
  production-deployment:
    name: üöÄ Production Infrastructure Deployment  
    runs-on: ubuntu-latest
    needs: [security-validation, terraform-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîß Setup Terraform with Cloud Integration
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}
          
      - name: üîê Configure Scaleway Environment
        run: |
          echo "üîê Configuring Scaleway environment..."
          echo "SCW_ACCESS_KEY=$SCALEWAY_ACCESS_KEY" >> $GITHUB_ENV
          echo "SCW_SECRET_KEY=$SCALEWAY_SECRET_KEY" >> $GITHUB_ENV
          echo "SCW_DEFAULT_PROJECT_ID=$SCALEWAY_DEFAULT_PROJECT_ID" >> $GITHUB_ENV
          echo "SCW_DEFAULT_ORGANIZATION_ID=$SCALEWAY_DEFAULT_ORGANIZATION_ID" >> $GITHUB_ENV
          echo "SCW_DEFAULT_ZONE=nl-ams-1" >> $GITHUB_ENV
          echo "SCW_DEFAULT_REGION=nl-ams" >> $GITHUB_ENV
          
      - name: üöÄ Deploy Infrastructure via Terraform Cloud
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          echo "üéØ Target Environment: $ENVIRONMENT"
          echo "üìä Deployment #${{ github.run_number }}"
          echo "üåç Workspace: jlam-$ENVIRONMENT"
          
          # Validate environment
          if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
            echo "‚ùå Invalid environment: $ENVIRONMENT"
            exit 1
          fi
          
          cd environments/$ENVIRONMENT/
          
          echo "üöÄ Deploying JLAM Infrastructure to $ENVIRONMENT via Terraform Cloud..."
          echo "‚òÅÔ∏è  Using Terraform Cloud workspace: jlam/jlam-$ENVIRONMENT"
          
          # Initialize with environment-specific backend
          terraform init
          
          # Create plan (stored in Terraform Cloud)
          terraform plan
          
          # Apply changes (with Terraform Cloud state management)
          terraform apply -auto-approve
          
          echo "‚úÖ $ENVIRONMENT infrastructure deployed successfully via Terraform Cloud"

  # ===== PHASE 4: HEALTH & PERFORMANCE VALIDATION =====
  post-deployment-validation:
    name: üè• Health & Performance Validation
    runs-on: ubuntu-latest
    needs: production-deployment
    
    steps:
      - name: ‚è≥ Wait for Service Startup
        run: |
          echo "‚è≥ Waiting 5 minutes for complete service initialization..."
          sleep 300
          
      - name: üè• Enterprise Health Checks
        run: |
          echo "üè• Performing comprehensive health checks..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          # Set endpoints based on environment
          if [[ "$ENVIRONMENT" == "staging" ]]; then
            ENDPOINTS=("http://51.158.190.109" "http://51.158.190.109:8080")
            echo "üß™ Testing staging environment (existing IP: 51.158.190.109)"
          else
            ENDPOINTS=("https://app.jlam.nl" "https://auth.jlam.nl")
            echo "üè≠ Testing production environment (DNS-based URLs)"
          fi
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing $endpoint..."
            for attempt in {1..10}; do
              if curl -sf --max-time 30 "$endpoint" > /dev/null 2>&1; then
                echo "‚úÖ $endpoint is healthy"
                break
              else
                if [ $attempt -eq 10 ]; then
                  echo "‚ùå $endpoint failed health check after 10 attempts"
                  exit 1
                else
                  echo "‚è≥ $endpoint not ready, attempt $attempt/10..."
                  sleep 30
                fi
              fi
            done
          done
          
      - name: üîç IP Retention Verification (CRITICAL)
        run: |
          echo "üîç Verifying IP retention - CRITICAL CHECK"
          if nslookup app.jlam.nl | grep -q "51.158.190.109"; then
            echo "‚úÖ IP 51.158.190.109 retained successfully"
          else
            echo "‚ùå CRITICAL: IP ADDRESS CHANGED! This breaks DNS!"
            exit 1
          fi
          
      - name: ‚ö° Performance Validation
        run: |
          echo "‚ö° Performance validation..."
          
          # Test response times
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://app.jlam.nl)
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Validate response time is under 2 seconds
          if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
            echo "‚úÖ Response time acceptable: ${RESPONSE_TIME}s"
          else
            echo "‚ö†Ô∏è  Response time slow but acceptable: ${RESPONSE_TIME}s"
          fi

  # ===== PHASE 5: DEPLOYMENT SUCCESS =====
  deployment-success:
    name: üéâ Deployment Success Notification
    runs-on: ubuntu-latest
    needs: [production-deployment, post-deployment-validation]
    
    steps:
      - name: üéâ Success Summary
        run: |
          echo "üéâ JLAM Production Infrastructure Deployed Successfully!"
          echo ""
          echo "üìä Deployment Summary:"
          echo "   ‚Ä¢ Deployment #${{ github.run_number }}"
          echo "   ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "   ‚Ä¢ Commit: ${{ github.sha }}"
          echo ""
          echo "üåê Production URLs:"
          echo "   ‚Ä¢ App: https://app.jlam.nl"  
          echo "   ‚Ä¢ Auth: https://auth.jlam.nl"
          echo "   ‚Ä¢ Monitor: https://monitor.jlam.nl"
          echo ""
          echo "‚úÖ Features Deployed:"
          echo "   ‚Ä¢ Enterprise Security Headers"
          echo "   ‚Ä¢ SSL Certificates (Let's Encrypt + Sectigo)"
          echo "   ‚Ä¢ Health Checks & Monitoring"
          echo "   ‚Ä¢ Resource Limits & Performance Optimization"
          echo "   ‚Ä¢ IP Retention (51.158.190.109)"
          echo ""
          echo "üèÜ Clean Repository Success!"
          echo "   From 76+ failed deployments ‚Üí Clean, working infrastructure"
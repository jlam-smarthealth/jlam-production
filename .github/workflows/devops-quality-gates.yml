name: 🛡️ DevOps Quality Gates
# Enterprise-grade CI/CD pipeline with comprehensive testing and validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Daily security and quality checks at 02:00 UTC
    - cron: '0 2 * * *'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================
  # CODE QUALITY & SECURITY SCANNING
  # ============================================
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret Detection with GitLeaks
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Dockerfile Security Scan
        run: |
          docker run --rm -v "$PWD":/project openpolicyagent/conftest test --policy conftest-security.rego docker-compose*.yml || true

  # ============================================
  # INFRASTRUCTURE VALIDATION
  # ============================================
  infrastructure-validation:
    name: 🏗️ Infrastructure Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Validation
        working-directory: ./terraform
        run: |
          terraform init -backend=false
          terraform validate

      - name: Terraform Security Scan (tfsec)
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform

      - name: Docker Compose Validation
        run: |
          # Validate all compose files
          docker-compose config
          docker-compose -f docker-compose.monitoring.yml config
          
          # Check for common issues
          echo "🔍 Checking for hard-coded secrets..."
          if grep -r "password.*=" --exclude-dir=.git .; then
            echo "❌ Hard-coded passwords found!"
            exit 1
          fi
          
          echo "🔍 Checking for exposed ports..."
          if docker-compose config | grep -E "80:80|443:443" | grep -v "traefik"; then
            echo "⚠️  Ports 80/443 exposed directly (should use Traefik)"
          fi

      - name: Shell Script Validation
        run: |
          # Install shellcheck
          sudo apt-get update && sudo apt-get install -y shellcheck
          
          # Check all shell scripts
          find . -name "*.sh" -type f | while read -r script; do
            echo "🔍 Checking $script"
            shellcheck "$script" || echo "⚠️  Issues found in $script"
          done

  # ============================================
  # CONTAINER TESTING
  # ============================================
  container-tests:
    name: 🐳 Container Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Test Environment
        run: |
          # Create test environment variables
          cat > .env.test << EOF
          AUTHENTIK_SECRET_KEY=test-secret-key-for-ci-cd-pipeline-testing-only
          AUTHENTIK_DB_PASSWORD=test-db-password-for-ci-cd-pipeline-testing
          GRAFANA_ADMIN_PASSWORD=test-grafana-admin-password
          PROMETHEUS_AUTH=admin:\$2y\$10\$test-prometheus-auth-hash
          JLAM_DATABASE_USER=test_user
          JLAM_DATABASE_PASSWORD=test_password
          JLAM_DATABASE_HOST=localhost
          JLAM_DATABASE_PORT=5432
          JLAM_DATABASE_NAME=test_db
          SMTP_HOST=smtp.test.com
          SMTP_USER=test@test.com
          SMTP_PASSWORD=test_smtp_password
          SMTP_FROM_EMAIL=noreply@test.com
          BACKUP_S3_BUCKET=test-backups
          BACKUP_ENCRYPTION_KEY=test-encryption-key
          EOF

      - name: Container Build Test
        run: |
          # Test main application stack
          docker-compose --env-file .env.test build --parallel
          
      - name: Container Start Test
        run: |
          # Start core services
          docker-compose --env-file .env.test up -d traefik
          
          # Wait for services to be ready
          sleep 30
          
          # Check container health
          docker ps --format "table {{.Names}}\t{{.Status}}"
          
          # Verify Traefik is responding
          curl -f http://localhost:8080/ping || {
            echo "❌ Traefik health check failed"
            docker logs jlam-traefik
            exit 1
          }

      - name: Network Connectivity Test
        run: |
          # Test internal Docker networking
          docker network ls
          docker network inspect jlam-network
          
          # Test service discovery
          docker run --rm --network jlam-network curlimages/curl:latest \
            curl -f http://traefik:8080/ping

      - name: Service Health Checks
        run: |
          # Wait for all health checks to pass
          timeout=300
          while [ $timeout -gt 0 ]; do
            if docker-compose --env-file .env.test ps | grep -q "unhealthy"; then
              echo "⏳ Waiting for services to become healthy..."
              sleep 10
              timeout=$((timeout - 10))
            else
              echo "✅ All services healthy"
              break
            fi
          done
          
          if [ $timeout -eq 0 ]; then
            echo "❌ Timeout waiting for services to become healthy"
            docker-compose --env-file .env.test ps
            docker-compose --env-file .env.test logs
            exit 1
          fi

      - name: Cleanup Test Environment
        if: always()
        run: |
          docker-compose --env-file .env.test down -v --remove-orphans
          docker system prune -af

  # ============================================
  # MONITORING STACK VALIDATION
  # ============================================
  monitoring-tests:
    name: 📊 Monitoring Stack Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Test Environment
        run: |
          # Create minimal test environment
          cat > .env.monitoring << EOF
          GRAFANA_ADMIN_PASSWORD=test-admin-password
          PROMETHEUS_AUTH=admin:\$2y\$10\$test-prometheus-auth
          EOF

      - name: Validate Prometheus Configuration
        run: |
          # Check Prometheus config syntax
          docker run --rm -v "$PWD/monitoring/prometheus":/prometheus \
            prom/prometheus:latest \
            promtool check config /prometheus/prometheus.yml

      - name: Validate Alert Rules
        run: |
          # Check alert rule syntax
          docker run --rm -v "$PWD/monitoring/prometheus":/prometheus \
            prom/prometheus:latest \
            promtool check rules /prometheus/alerts/*.yml

      - name: Test Monitoring Stack
        run: |
          # Start monitoring services
          docker-compose --env-file .env.monitoring -f docker-compose.monitoring.yml up -d prometheus grafana
          
          # Wait for services
          sleep 60
          
          # Test Prometheus
          curl -f http://localhost:9090/-/healthy || {
            echo "❌ Prometheus health check failed"
            docker logs jlam-prometheus
            exit 1
          }
          
          # Test Grafana
          curl -f http://localhost:3000/api/health || {
            echo "❌ Grafana health check failed"
            docker logs jlam-grafana
            exit 1
          }
          
          # Test Prometheus targets
          curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets | length' || {
            echo "❌ Prometheus targets query failed"
            exit 1
          }

      - name: Cleanup Monitoring Test
        if: always()
        run: |
          docker-compose --env-file .env.monitoring -f docker-compose.monitoring.yml down -v

  # ============================================
  # BACKUP SYSTEM VALIDATION
  # ============================================
  backup-tests:
    name: 💾 Backup System Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Backup Script
        run: |
          # Check backup script syntax
          bash -n scripts/backup.sh
          
          # Install shellcheck for detailed analysis
          sudo apt-get update && sudo apt-get install -y shellcheck
          shellcheck scripts/backup.sh

      - name: Test Backup Script (Dry Run)
        run: |
          # Create mock environment
          mkdir -p /tmp/test-backup
          export BACKUP_DIR="/tmp/test-backup"
          export TIMESTAMP="test-$(date +%Y%m%d_%H%M%S)"
          export LOG_FILE="/tmp/test-backup.log"
          
          # Mock required commands
          sudo apt-get install -y postgresql-client
          
          # Test backup script components
          echo "🔍 Testing backup script components..."
          
          # Test log function
          bash -c 'source scripts/backup.sh; log "Test log message"'
          
          # Test disk space check logic
          bash -c 'source scripts/backup.sh; AVAILABLE_SPACE=10485760; REQUIRED_SPACE=5242880; echo "Space check: OK"'

  # ============================================
  # PERFORMANCE & LOAD TESTING
  # ============================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Test Environment
        run: |
          cat > .env.perf << EOF
          AUTHENTIK_SECRET_KEY=perf-test-secret
          AUTHENTIK_DB_PASSWORD=perf-test-password
          EOF

      - name: Start Services for Load Testing
        run: |
          docker-compose --env-file .env.perf up -d traefik
          sleep 30

      - name: Install Load Testing Tools
        run: |
          # Install Apache Bench
          sudo apt-get update && sudo apt-get install -y apache2-utils
          
          # Install curl for advanced testing
          sudo apt-get install -y curl jq

      - name: Basic Load Test
        run: |
          # Test Traefik dashboard endpoint
          ab -n 1000 -c 10 http://localhost:8080/ping
          
          # Test with different concurrency levels
          for concurrency in 1 5 10; do
            echo "🔍 Testing with $concurrency concurrent requests"
            ab -n 100 -c $concurrency http://localhost:8080/ping | grep -E "(Requests per second|Time per request)"
          done

      - name: Resource Usage Analysis
        run: |
          # Monitor container resource usage
          echo "📊 Container Resource Usage:"
          docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
          
          # Check for resource limits compliance
          docker inspect jlam-traefik | jq '.[0].HostConfig.Memory // "unlimited"'

      - name: Cleanup Performance Test
        if: always()
        run: |
          docker-compose --env-file .env.perf down -v

  # ============================================
  # COMPLIANCE & DOCUMENTATION
  # ============================================
  compliance-checks:
    name: 📋 Compliance & Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Documentation Quality Check
        run: |
          # Check for required documentation files
          required_docs=("README.md" "docs/DEVOPS-INFRASTRUCTURE-REPORT.md" "docs/GITHUB-SECRETS-SETUP.md")
          for doc in "${required_docs[@]}"; do
            if [[ -f "$doc" ]]; then
              echo "✅ $doc exists"
            else
              echo "❌ Missing required documentation: $doc"
              exit 1
            fi
          done
          
          # Check documentation quality
          echo "📖 Documentation statistics:"
          wc -l README.md docs/*.md

      - name: Security Compliance Check
        run: |
          # Check for security best practices
          echo "🔒 Security compliance checks:"
          
          # Verify no secrets in repository
          if git log --all --full-history -- "*" | grep -i -E "(password|secret|key)" | grep -v "test"; then
            echo "⚠️  Potential secrets found in git history"
          fi
          
          # Check SSL configuration
          if grep -r "ssl.*false" --exclude-dir=.git . 2>/dev/null; then
            echo "⚠️  SSL disabled configurations found"
          fi
          
          # Verify backup encryption
          if grep -q "gpg.*encrypt" scripts/backup.sh; then
            echo "✅ Backup encryption configured"
          else
            echo "❌ Backup encryption not found"
            exit 1
          fi

      - name: GDPR/Healthcare Compliance
        run: |
          # Check for healthcare compliance indicators
          echo "🏥 Healthcare compliance checks:"
          
          # Database isolation check
          if docker-compose config | grep -q "authentik.*database"; then
            echo "✅ Separate authentication database configured"
          fi
          
          # Backup retention check
          if grep -q "RETENTION_DAYS" scripts/backup.sh; then
            echo "✅ Backup retention policy configured"
          fi
          
          # Audit logging check
          if grep -q "audit" monitoring/prometheus/alerts/*.yml; then
            echo "✅ Audit logging alerts configured"
          fi

  # ============================================
  # DEPLOYMENT READINESS
  # ============================================
  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [security-scan, infrastructure-validation, container-tests, monitoring-tests, backup-tests, performance-tests, compliance-checks]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Deployment Report
        run: |
          echo "# 🚀 Deployment Readiness Report" > deployment-report.md
          echo "**Generated**: $(date)" >> deployment-report.md
          echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## ✅ Quality Gates Passed" >> deployment-report.md
          echo "- Security scanning completed" >> deployment-report.md
          echo "- Infrastructure validation passed" >> deployment-report.md
          echo "- Container tests successful" >> deployment-report.md
          echo "- Monitoring stack validated" >> deployment-report.md
          echo "- Backup system tested" >> deployment-report.md
          echo "- Performance benchmarks met" >> deployment-report.md
          echo "- Compliance checks passed" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## 🎯 Deployment Approval" >> deployment-report.md
          echo "This build is **APPROVED** for production deployment." >> deployment-report.md

      - name: Upload Deployment Report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-readiness-report
          path: deployment-report.md

      - name: Deployment Notification
        run: |
          echo "🎉 All quality gates passed! Deployment ready."
          echo "📊 Test Results Summary:"
          echo "  - Security: ✅ Passed"
          echo "  - Infrastructure: ✅ Passed"  
          echo "  - Containers: ✅ Passed"
          echo "  - Monitoring: ✅ Passed"
          echo "  - Backup: ✅ Passed"
          echo "  - Performance: ✅ Passed"
          echo "  - Compliance: ✅ Passed"